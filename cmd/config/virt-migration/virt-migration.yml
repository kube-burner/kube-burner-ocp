{{- $testName := "virt-migration" }}
{{- $testNamespacesLabelKey := "kube-burner.io/test-name" -}}
{{- $vmName := $testName -}}
{{- $sshPublicKeySecretName := $testName -}}
{{- $createMigratingVMsJobName := "create-migrating-vms" -}}
{{- $createLoadVMsJobName := "create-load-vms" -}}
---
global:
  measurements:
  - name: vmiLatency
  - name: vmimLatency

metricsEndpoints:
- indexer:
    type: local
    metricsDirectory: ./virt-migration-results

jobs:
- name: start-fresh
  jobType: delete
  waitForDeletion: true
  qps: 5
  burst: 10
  objects:
  - kind: Namespace
    labelSelector:
      {{ $testNamespacesLabelKey }}: {{ $testName }}

- name: {{ $createMigratingVMsJobName }}
  jobType: create
  jobIterations: {{ .vmCreateIterations }}
  qps: 20
  burst: 20
  namespacedIterations: false
  namespace: {{ .testNamespace }}
  namespaceLabels:
    {{ $testNamespacesLabelKey }}: {{ $testName }}
  # verify object count after running each job
  verifyObjects: true
  errorOnVerify: true
  # wait all VMI be in the Ready Condition
  waitWhenFinished: false
  podWait: true
  # timeout time after waiting for all object creation
  maxWaitTimeout: 2h
  jobPause: 10s
  cleanup: false
  # Set missing key as empty to allow using default values
  defaultMissingKeysWithZero: true
  beforeCleanup: "./check.sh check_vm_running kube-burner-job {{ $createMigratingVMsJobName }} {{ .testNamespace }} {{ .privateKey }} fedora"
  objects:

  - objectTemplate: templates/secret_ssh_public.yml
    runOnce: true
    replicas: 1
    inputVars:
      name: {{ $sshPublicKeySecretName }}
      publicKeyPath: {{ .publicKey }}

  - objectTemplate: templates/vm.yml
    replicas: {{ .vmCreatePerIteration }}
    inputVars:
      name: {{ $vmName }}
      rootDiskImage: quay.io/containerdisks/fedora:41
      storageClassName: {{ .storageClassName }}
      sshPublicKeySecret: {{ $sshPublicKeySecretName }}
      dataVolumeCounters:
      {{ range .dataVolumeCounters }}
      - {{ . }}
      {{ end }}
      affinity: "In"
      workerNodeName: {{ .workerNodeName }}

{{- if gt .loadVMsPerIteration 0 }}
- name: {{ $createLoadVMsJobName }}
  jobType: create
  jobIterations: {{ .loadVMsIterations }}
  qps: 20
  burst: 20
  namespacedIterations: false
  namespace: {{ .testNamespace }}
  namespaceLabels:
    {{ $testNamespacesLabelKey }}: {{ $testName }}
  # verify object count after running each job
  verifyObjects: true
  errorOnVerify: true
  # wait all VMI be in the Ready Condition
  waitWhenFinished: false
  podWait: true
  # timeout time after waiting for all object creation
  maxWaitTimeout: 2h
  jobPause: 10s
  cleanup: false
  # Set missing key as empty to allow using default values
  defaultMissingKeysWithZero: true
  beforeCleanup: "./check.sh check_vm_running kube-burner-job {{ $createLoadVMsJobName }} {{ .testNamespace }} {{ .privateKey }} fedora"
  objects:

  - objectTemplate: templates/vm.yml
    replicas: {{ .loadVMsPerIteration }}
    inputVars:
      name: {{ $vmName }}-load
      rootDiskImage: quay.io/containerdisks/fedora:41
      storageClassName: {{ .storageClassName }}
      sshPublicKeySecret: {{ $sshPublicKeySecretName }}
      dataVolumeCounters:
      {{ range .dataVolumeCounters }}
      - {{ . }}
      {{ end }}
      affinity: "NotIn"
      workerNodeName: {{ .workerNodeName }}
{{- end }}

- name: remove-affinity-rule
  jobType: patch
  jobIterations: 1
  executionMode: sequential
  waitWhenFinished: false
  qps: 20
  burst: 20
  objects:
    - apiVersion: kubevirt.io/v1
      kind: VirtualMachine
      labelSelector:
        kube-burner-job: {{ $createMigratingVMsJobName }}
      patchType: "application/merge-patch+json"
      objectTemplate: templates/remove_affinity_patch.yml

- name: migrate-vms
  jobType: kubevirt
  qps: {{ .migrationQPS }}
  burst: {{ .migrationQPS }}
  jobIterations: 1
  maxWaitTimeout: 1h
  waitWhenFinished: true
  beforeCleanup: "./check.sh check_vm_running kube-burner-job {{ $createMigratingVMsJobName }} {{ .testNamespace }} {{ .privateKey }} fedora"
  objects:
  - kubeVirtOp: migrate
    labelSelector:
      kube-burner-job: {{ $createMigratingVMsJobName }}
